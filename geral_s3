kid1 <- list(album <- logical(10),
             collection <- numeric(10))

kid2 <- list(album <- logical(10),
             collection <- numeric(10))

kid3 <- list(album <- logical(10),
             collection <- numeric(10))

class(kid1) <- "kid"
class(kid2) <- "kid"
class(kid3) <- "kid"

kids <- list(kid1, kid2, kid3)
class(kids) <- "kid"

buycards <- function(x, ...){
  UseMethod("buycards", x)
}

buycards.kid <- function(kids){
  for(i in 1:length(kids)){
    pack <- sort(sample(10, 5, TRUE))
    for(j in pack){
      if(kids[[i]][[1]][j] == 0){
        kids[[i]][[1]][j] <- TRUE
      } 
      else {
        kids[[i]][[2]][j] <- kids[[i]][[2]][j] + 1
      }
    }
  }
  return(kids)
}

kids <- buycards(kids)

getcards <- function(x, ...){
  UseMethod("getcards", x)
}

getcards.kid <- function(kids, x, get){
  if(x > length(kids)){
    stop("There is no kid of index ", x, ".")
  }
  
  if(get == "stock"){
    kids[[x]][[2]]
  }
  else if(get == "album"){
    kids[[x]][[1]]
  }
  else{
    stop(paste0("There is no parameter called ", get))
  }
}

getcards(kids, 2, "stock")

trade <- function(kid, ...){
  UseMethod("trade", kid)
}

compare <- function(kid, ...){
  UseMethod("compare", kid)
}

compare.kid <- function(kid1, kid2){
  
}

trade.kid <- function(kid, behaviour){
  meet <- combn(1:length(kid), 2)
  meet <- meet[,sample(1:dim(meet)[2], dim(meet)[2], FALSE)]
  for(i in 1:dim(meet)[2]){
    k1 <- meet[1, i]
    k2 <- meet[2, i]
    k1.stock <- getcards(kid, k1, "stock")
    k1.album <- which(getcards(kid, k1, "album") == 0)
    k2.stock <- getcards(kid, k2, "stock")
    k2.album <- which(getcards(kid, k2, "album") == 0)
    k1.stock <- which(k1.stock[k2.album] > 0)
    k2.stock <- which(k2.stock[k1.album] > 0)
    if(behaviour == "bi"){
      if(!length(k1.stock) == 0 & !length(k2.stock) == 0){
        k <- min(length(k1.stock), length(k2.stock))
        k1.stock <- sample(k1.stock, k, FALSE)
        k2.stock <- sample(k2.stock, k, FALSE)
        kid[[k1]][[1]][k2.stock] <- 1
        kid[[k1]][[2]][k1.stock] <- kid[[k1]][[2]][k1.stock] - 1
        kid[[k2]][[1]][k1.stock] <- 1
        kid[[k2]][[2]][k2.stock] <- kid[[k2]][[2]][k2.stock] - 1
      }
    }
  }
}
